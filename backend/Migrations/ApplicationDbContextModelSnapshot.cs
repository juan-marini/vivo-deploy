// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("backend.Models.Entities.Perfil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("perfis", (string)null);
                });

            modelBuilder.Entity("backend.Models.Entities.Sessao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("criado_em");

                    b.Property<DateTime>("ExpiraEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("expira_em");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext")
                        .HasColumnName("ip_address");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext")
                        .HasColumnName("user_agent");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("sessoes");
                });

            modelBuilder.Entity("backend.Models.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Ativo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("AtualizadoEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("atualizado_em");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("longtext")
                        .HasColumnName("avatar_url");

                    b.Property<string>("Cargo")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CriadoEm")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("criado_em");

                    b.Property<DateTime?>("DataAdmissao")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("data_admissao");

                    b.Property<string>("Departamento")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("GestorId")
                        .HasColumnType("int")
                        .HasColumnName("gestor_id");

                    b.Property<string>("NomeCompleto")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nome_completo");

                    b.Property<int>("PerfilId")
                        .HasColumnType("int")
                        .HasColumnName("perfil_id");

                    b.Property<bool>("PrimeiroAcesso")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("primeiro_acesso");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("UltimoLogin")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("ultimo_login");

                    b.HasKey("Id");

                    b.HasIndex("GestorId");

                    b.HasIndex("PerfilId");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("backend.Models.Entities.Sessao", b =>
                {
                    b.HasOne("backend.Models.Entities.Usuario", "Usuario")
                        .WithMany("Sessoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("backend.Models.Entities.Usuario", b =>
                {
                    b.HasOne("backend.Models.Entities.Usuario", "Gestor")
                        .WithMany("Subordinados")
                        .HasForeignKey("GestorId");

                    b.HasOne("backend.Models.Entities.Perfil", "Perfil")
                        .WithMany("Usuarios")
                        .HasForeignKey("PerfilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gestor");

                    b.Navigation("Perfil");
                });

            modelBuilder.Entity("backend.Models.Entities.Perfil", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("backend.Models.Entities.Usuario", b =>
                {
                    b.Navigation("Sessoes");

                    b.Navigation("Subordinados");
                });
#pragma warning restore 612, 618
        }
    }
}
